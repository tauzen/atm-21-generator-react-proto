{"version":3,"sources":["logo.svg","canvas/useCanvas.js","canvas/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["useCanvas","draw","options","width","height","canvasRef","useRef","useEffect","current","animationFrameId","context","getContext","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","Canvas","props","rest","ref","createImage","src","img","Image","images","body","dark","light","pants","red","teal","shirt","brown","App","useState","setBody","setPants","setShirt","className","ctx","clearRect","canvas","fillStyle","beginPath","arc","Math","sin","PI","fill","drawImage","onClick","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+NAAe,MAA0B,iC,cC6B1BA,EA3BG,SAACC,GAAiD,IAA3CC,EAA0C,uDAAhC,CAAEC,MAAO,IAAKC,OAAQ,KACjDC,EAAYC,iBAAO,MAuBzB,OArBAC,qBAAU,WACR,IAAQJ,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OACfC,EAAUG,QAAQL,MAAQA,EAC1BE,EAAUG,QAAQJ,OAASA,EAE3B,IAEIK,EAFEC,EAAUL,EAAUG,QAAQG,WAAW,MACzCC,EAAa,EAUjB,OAPe,SAATC,IACJD,IACAX,EAAKS,EAASE,GACdH,EAAmBK,OAAOC,sBAAsBF,GAElDA,GAEO,WACLC,OAAOE,qBAAqBP,MAE7B,CAACR,EAAMC,IAEHG,G,4BCjBMY,EAPA,SAACC,GACd,IAAQjB,EAA2BiB,EAA3BjB,KAAMC,EAAqBgB,EAArBhB,QAAYiB,EAA1B,YAAmCD,EAAnC,GACMb,EAAYL,EAAUC,EAAMC,GAElC,OAAO,oCAAQkB,IAAKf,GAAec,KCD/BE,G,MAAc,SAACC,GACnB,IAAMC,EAAM,IAAIC,MAGhB,OAFAD,EAAID,IAAMA,EAEHC,IAMHE,EAAS,CACbC,KAAM,CACJC,KAAMN,EAAY,gDAClBO,MAAOP,EAAY,kDAErBQ,MAAO,CACLC,IAAKT,EACH,gEAEFU,KAAMV,EACJ,kEAGJW,MAAO,CACLC,MAAOZ,EACL,+EAEFU,KAAMV,EACJ,gFA2CSa,MAtCf,WACE,MAAwBC,mBAAS,SAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA0BD,mBAAS,OAAnC,mBAAON,EAAP,KAAcQ,EAAd,KACA,EAA0BF,mBAAS,SAAnC,mBAAOH,EAAP,KAAcM,EAAd,KAeA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,CAAQtC,KAhBD,SAACuC,EAAK5B,GACjB4B,EAAIC,UAAU,EAAG,EAAGD,EAAIE,OAAOvC,MAAOqC,EAAIE,OAAOtC,QAEjDoC,EAAIG,UAAY,UAChBH,EAAII,YACJJ,EAAIK,IAAI,GAAI,GAAI,YAAKC,KAAKC,IAAiB,IAAbnC,GAAsB,GAAG,EAAG,EAAIkC,KAAKE,IACnER,EAAIS,OAEJT,EAAIU,UAAUzB,EAAM,KAASC,GAAO,EAAG,GACvCc,EAAIU,UAAUzB,EAAM,MAAUI,GAAQ,EAAG,GACzCW,EAAIU,UAAUzB,EAAM,MAAUO,GAAQ,EAAG,IAMjB9B,QAAS,CAAEC,MAAO,IAAKC,OAAQ,OAEnD,wBAAQ+C,QAAS,kBAAMf,EAAQ,UAA/B,wBACA,wBAAQe,QAAS,kBAAMf,EAAQ,SAA/B,uBAEA,wBAAQe,QAAS,kBAAMd,EAAS,QAAhC,uBACA,wBAAQc,QAAS,kBAAMd,EAAS,SAAhC,wBAEA,wBAAQc,QAAS,kBAAMb,EAAS,UAAhC,yBACA,wBAAQa,QAAS,kBAAMb,EAAS,SAAhC,wBAEA,qBAAKhB,IAAK8B,EAAMb,UAAU,WAAWc,IAAI,eC1DlCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASlD,OACP,cAAC,IAAMmD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1f4283b2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useRef, useEffect } from 'react';\n\nconst useCanvas = (draw, options = { width: 100, height: 100 }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const { width, height } = options;\n    canvasRef.current.width = width;\n    canvasRef.current.height = height;\n\n    const context = canvasRef.current.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw, options]);\n\n  return canvasRef;\n};\n\nexport default useCanvas;\n","import useCanvas from './useCanvas';\n\nconst Canvas = (props) => {\n  const { draw, options, ...rest } = props;\n  const canvasRef = useCanvas(draw, options);\n\n  return <canvas ref={canvasRef} {...rest} />;\n};\n\nexport default Canvas;\n","import logo from './logo.svg';\nimport Canvas from './canvas/Canvas';\nimport './App.css';\nimport { useState } from 'react';\n\nconst createImage = (src) => {\n  const img = new Image();\n  img.src = src;\n\n  return img;\n};\n\n// we should probably import images directly here via React so we'll get\n// data-uri conversion oout of the box, still we might need to change\n// IMAGE_INLINE_SIZE_LIMIT, see https://create-react-app.dev/docs/adding-images-fonts-and-files/\nconst images = {\n  body: {\n    dark: createImage('Universal-LPC-spritesheet/body/male/dark.png'),\n    light: createImage('Universal-LPC-spritesheet/body/male/light.png'),\n  },\n  pants: {\n    red: createImage(\n      'Universal-LPC-spritesheet/legs/pants/male/red_pants_male.png'\n    ),\n    teal: createImage(\n      'Universal-LPC-spritesheet/legs/pants/male/teal_pants_male.png'\n    ),\n  },\n  shirt: {\n    brown: createImage(\n      'Universal-LPC-spritesheet/torso/shirts/longsleeve/male/brown_longsleeve.png'\n    ),\n    teal: createImage(\n      'Universal-LPC-spritesheet/torso/shirts/longsleeve/male/teal_longsleeve.png'\n    ),\n  },\n};\n\nfunction App() {\n  const [body, setBody] = useState('light');\n  const [pants, setPants] = useState('red');\n  const [shirt, setShirt] = useState('brown');\n\n  const draw = (ctx, frameCount) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    ctx.fillStyle = '#000000';\n    ctx.beginPath();\n    ctx.arc(95, 90, 70 * Math.sin(frameCount * 0.03) ** 2, 0, 2 * Math.PI);\n    ctx.fill();\n\n    ctx.drawImage(images['body'][body], 0, 0);\n    ctx.drawImage(images['pants'][pants], 0, 0);\n    ctx.drawImage(images['shirt'][shirt], 0, 0);\n  };\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <Canvas draw={draw} options={{ width: 189, height: 195 }} />\n\n        <button onClick={() => setBody('light')}>Light Body</button>\n        <button onClick={() => setBody('dark')}>Dark Body</button>\n\n        <button onClick={() => setPants('red')}>Red Pants</button>\n        <button onClick={() => setPants('teal')}>Teal Pants</button>\n\n        <button onClick={() => setShirt('brown')}>Brown Shirt</button>\n        <button onClick={() => setShirt('teal')}>Teal Shirt</button>\n\n        <img src={logo} className='App-logo' alt='logo' />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}